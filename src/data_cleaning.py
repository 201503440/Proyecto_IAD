import pandas as pd
import functions as f

# Cargar los archivos de jugadores 
df1 = pd.read_csv('../data/players_15.csv')
df2 = pd.read_csv('../data/players_16.csv')
df3 = pd.read_csv('../data/players_17.csv')
df4 = pd.read_csv('../data/players_18.csv')
df5 = pd.read_csv('../data/players_19.csv')
df6 = pd.read_csv('../data/players_20.csv')

# Concatenar los archivos de jugadores
df_players = pd.concat([df1, df2, df3, df4, df5, df6], ignore_index=True)

# Cargar el archivo de ligas 
df_leagues = pd.read_csv('../data/teams_and_leagues.csv')

# print(df_players.head(10))
# print(df_leagues.head(10)) # Lineas comentadas para no ejecutarlas cada ver que se ejecuta el script

# Eliminaremos registros duplicados segun campo sofifa_id
df_players = df_players.drop_duplicates(subset='sofifa_id')

# Verificar los valores nulos
print(len(df_players))
print(df_players.isnull().sum())
print(len(df_leagues))
print(df_leagues.isnull().sum())

# Verificar y corregir tipos de datos
df_players.describe()
df_leagues.describe()

df_players.dtypes
df_leagues.dtypes

# f.save_dataset_to_csv(dataset=df_players, filename='df_players.csv') # Linea debug

# Darle un tipo de dato especifico a cada columna para mantener un orden
df_players['sofifa_id'] = df_players['sofifa_id'].astype(int)
df_players['player_url'] = df_players['player_url'].astype(str)
df_players['short_name'] = df_players['short_name'].astype(str)
df_players['long_name'] = df_players['long_name'].astype(str)
df_players['age'] = df_players['age'].astype(int)
df_players['dob'] = pd.to_datetime(df_players['dob'], errors='coerce')
df_players['height_cm'] = df_players['height_cm'].astype(int)
df_players['weight_kg'] = df_players['weight_kg'].astype(int)
df_players['nationality'] = df_players['nationality'].astype(str)
df_players['club'] = df_players['club'].astype(str)
df_players['overall'] = df_players['overall'].astype(int)
df_players['potential'] = df_players['potential'].astype(int)
df_players['value_eur'] = df_players['value_eur'].astype(int)
df_players['wage_eur'] = df_players['wage_eur'].astype(int)
df_players['player_positions'] = df_players['player_positions'].astype(str)
df_players['preferred_foot'] = df_players['preferred_foot'].astype(str)
df_players['international_reputation'] = df_players['international_reputation'].astype(int)
df_players['weak_foot'] = df_players['weak_foot'].astype(int)
df_players['skill_moves'] = df_players['skill_moves'].astype(int)
df_players['work_rate'] = df_players['work_rate'].astype(str)
df_players['body_type'] = df_players['body_type'].astype(str)
df_players['real_face'] = df_players['real_face'].astype(str)
df_players['release_clause_eur'] = df_players['release_clause_eur'].astype(int)
df_players['player_tags'] = df_players['player_tags'].astype(str)
df_players['team_position'] = df_players['team_position'].astype(str)
df_players['team_jersey_number'] = df_players['team_jersey_number'].astype(int)
df_players['loaned_from'] = df_players['loaned_from'].astype(str)
df_players['joined'] = pd.to_datetime(df_players['joined'], errors='coerce')
df_players['contract_valid_until'] = df_players['contract_valid_until'].astype(int)
df_players['nation_position'] = df_players['nation_position'].astype(int)
df_players['nation_jersey_number'] = df_players['nation_jersey_number'].astype(int)
df_players['pace'] = df_players['pace'].astype(int)
df_players['shooting'] = df_players['shooting'].astype(int)
df_players['passing'] = df_players['passing'].astype(int)
df_players['dribbling'] = df_players['dribbling'].astype(int)
df_players['defending'] = df_players['defending'].astype(int)
df_players['physic'] = df_players['physic'].astype(int)
df_players['gk_diving'] = df_players['gk_diving'].astype(int)
df_players['gk_handling'] = df_players['gk_handling'].astype(int)
df_players['gk_kicking'] = df_players['gk_kicking'].astype(int)
df_players['gk_reflexes'] = df_players['gk_reflexes'].astype(int)
df_players['gk_speed'] = df_players['gk_speed'].astype(int)
df_players['gk_positioning'] = df_players['gk_positioning'].astype(int)
df_players['player_traits'] = df_players['player_traits'].astype(str)
df_players['attacking_crossing'] = df_players['attacking_crossing'].astype(int)
df_players['attacking_finishing'] = df_players['attacking_finishing'].astype(int)
df_players['attacking_heading_accuracy'] = df_players['attacking_heading_accuracy'].astype(int)
df_players['attacking_short_passing'] = df_players['attacking_short_passing'].astype(int)
df_players['attacking_volleys'] = df_players['attacking_volleys'].astype(int)
df_players['skill_dribbling'] = df_players['skill_dribbling'].astype(int)
df_players['skill_curve'] = df_players['skill_curve'].astype(int)
df_players['skill_fk_accuracy'] = df_players['skill_fk_accuracy'].astype(int)
df_players['skill_long_passing'] = df_players['skill_long_passing'].astype(int)
df_players['skill_ball_control'] = df_players['skill_ball_control'].astype(int)
df_players['movement_acceleration'] = df_players['movement_acceleration'].astype(int)
df_players['movement_sprint_speed'] = df_players['movement_sprint_speed'].astype(int)
df_players['movement_agility'] = df_players['movement_agility'].astype(int)
df_players['movement_reactions'] = df_players['movement_reactions'].astype(int)
df_players['movement_balance'] = df_players['movement_balance'].astype(int)
df_players['power_shot_power'] = df_players['power_shot_power'].astype(int)
df_players['power_jumping'] = df_players['power_jumping'].astype(int)
df_players['power_stamina'] = df_players['power_stamina'].astype(int)
df_players['power_strength'] = df_players['power_strength'].astype(int)
df_players['power_long_shots'] = df_players['power_long_shots'].astype(int)
df_players['mentality_aggression'] = df_players['mentality_aggression'].astype(int)
df_players['mentality_interceptions'] = df_players['mentality_interceptions'].astype(int)
df_players['mentality_positioning'] = df_players['mentality_positioning'].astype(int)
df_players['mentality_vision'] = df_players['mentality_vision'].astype(int)
df_players['mentality_penalties'] = df_players['mentality_penalties'].astype(int)
df_players['mentality_composure'] = df_players['mentality_composure'].astype(int)
df_players['defending_marking'] = df_players['defending_marking'].astype(int)
df_players['defending_standing_tackle'] = df_players['defending_standing_tackle'].astype(int)
df_players['defending_sliding_tackle'] = df_players['defending_sliding_tackle'].astype(int)
df_players['goalkeeping_diving'] = df_players['goalkeeping_diving'].astype(int)
df_players['goalkeeping_handling'] = df_players['goalkeeping_handling'].astype(int)
df_players['goalkeeping_kicking'] = df_players['goalkeeping_kicking'].astype(int)
df_players['goalkeeping_positioning'] = df_players['goalkeeping_positioning'].astype(int)
df_players['goalkeeping_reflexes'] = df_players['goalkeeping_reflexes'].astype(int)
df_players['ls'] = df_players['ls'].astype(str)
df_players['st'] = df_players['st'].astype(str)
df_players['rs'] = df_players['rs'].astype(str)
df_players['lw'] = df_players['lw'].astype(str)
df_players['lf'] = df_players['lf'].astype(str)
df_players['cf'] = df_players['cf'].astype(str)
df_players['rf'] = df_players['rf'].astype(str)
df_players['rw'] = df_players['rw'].astype(str)
df_players['lam'] = df_players['lam'].astype(str)
df_players['cam'] = df_players['cam'].astype(str)
df_players['ram'] = df_players['ram'].astype(str)
df_players['lm'] = df_players['lm'].astype(str)
df_players['lcm'] = df_players['lcm'].astype(str)
df_players['cm'] = df_players['cm'].astype(str)
df_players['rcm'] = df_players['rcm'].astype(str)
df_players['rm'] = df_players['rm'].astype(str)
df_players['lwb'] = df_players['lwb'].astype(str)
df_players['ldm'] = df_players['ldm'].astype(str)
df_players['cdm'] = df_players['cdm'].astype(str)
df_players['rdm'] = df_players['rdm'].astype(str)
df_players['rwb'] = df_players['rwb'].astype(str)
df_players['lb'] = df_players['lb'].astype(str)
df_players['lcb'] = df_players['lcb'].astype(str)
df_players['cb'] = df_players['cb'].astype(str)
df_players['rcb'] = df_players['rcb'].astype(str)
df_players['rb'] = df_players['rb'].astype(str)

# print(df_players['nationality'].value_counts()) #Validar algunos valores

# breakpoint()
